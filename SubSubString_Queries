import java.io.*;
import java.util.*;

public class Solution{
    public static void main(String args[]){
        
        Scanner sc = new Scanner(System.in);
        
        int num_strings = sc.nextInt();
        int num_queries = sc.nextInt();
        
        ArrayList<String> strings = new ArrayList<String>();
        HashMap<Integer,ArrayList<String>> sub_strings = new HashMap<Integer,ArrayList<String>>();
        
        for(int i=0;i<num_strings;i++){
            
            String word = sc.next();
            strings.add(word);
            ArrayList<String> temp = generateSubStrings(word);
            sub_strings.put(i,temp);
            
        }
        
       for(int q=0;q<num_queries;q++){
           
           int a = sc.nextInt();
           int b = sc.nextInt();
           
           ArrayList<String> a_words = sub_strings.get(a);
           ArrayList<String> b_words = sub_strings.get(b);
           
           findLongestSubString(a_words,b_words);
           
       }
        
    }
    
    public static ArrayList<String> generateSubStrings(String word){
        
        ArrayList<String> subs = new ArrayList<String>();
        
        for(int i=0;i<word.length();i++){
            
     //       System.out.println(word.substring(i,i+1));
            
            for(int j=i+1;j<=word.length();j++){
                
                subs.add(word.substring(i,j));
            }
            
        }
        
        return subs;
    }
    
    public static void findLongestSubString(ArrayList<String> a,ArrayList<String> b){
        
        ArrayList<Integer> length = new ArrayList<Integer>();
        
        Iterator it = a.iterator();
        while(it.hasNext()){
            
            String word = (String)it.next();
            if(b.contains(word)){
                length.add(word.length());
            }
            
        }
        
        Collections.sort(length);
        System.out.println(length.get(length.size()-1));
    }
    
}

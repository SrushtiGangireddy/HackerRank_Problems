import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    static int minimumNumber(int n, String password) {
        
        boolean dig = hasDigit(password);
        boolean lc = hasLC(password);
        boolean uc = hasUC(password);
        boolean sc = hasSC(password);
        
        int counter = 0;
        if(dig){
            counter++;
        }if(lc){
            counter++;
        }if(uc){
            counter++;
        }if(sc){
            counter++;
        }
        
      //  System.out.println(counter);
        
        if(counter == 4){
            if(n >= 6){
                return 0;
            }else{
                return (6-n);
            }
        }else if(counter == 3){
            if(n >= 6){
                return 1;
            }else{
                int less = 6-n;
                if(less <= 1){
                    return 1;
                }else{
                    return less;
                }
            }
        }else if(counter == 2){
            if(n >= 6){
                return 2;
            }else{
                int less = 6-n;
                if(less <= 2){
                    return 2;
                }else{
                    return less;
                }
            }
        }else if(counter == 1){
            if(n >= 6){
                return 3;
            }else{
                int less = 6-n;
                if(less <= 3){
                    return 3;
                }else{
                    return less;
                }
            }
        }else if(counter == 0){
            if(n >= 6){
                return 4;
            }else{
                int less = 6-n;
                if(less <= 4){
                    return 4;
                }else{
                    return less;
                }
                   
            }
        }
        
        return 0;
    }
    
    public static boolean hasDigit(String password){
        
        Pattern p = Pattern.compile("([0-9])");
        Matcher m = p.matcher(password);
        if(m.find()){
            return true;
        }
        return false;
        
    }
    
    public static boolean hasLC(String password){
        
        Pattern p = Pattern.compile("([a-z])");
        Matcher m = p.matcher(password);
        if(m.find()){
            return true;
        }
        return false;
        
    }
    
    public static boolean hasUC(String password){
        
        Pattern p = Pattern.compile("([A-Z])");
        Matcher m = p.matcher(password);
        if(m.find()){
            return true;
        }
        return false;
        
    }
    
    public static boolean hasSC(String password){
        
        Pattern p = Pattern.compile("([!@#$%^&*()+\\-])");
        Matcher m = p.matcher(password);
        if(m.find()){
            return true;
        }
        return false;
        
    }
    

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        int n = in.nextInt();
        String password = in.next();
        int answer = minimumNumber(n, password);
        System.out.println(answer);
        in.close();
    }
}

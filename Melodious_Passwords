import java.io.*;
import java.util.*;

public class Solution{
    public static void main(String args[]){
        
        Scanner sc = new Scanner(System.in);
        
        int n = sc.nextInt();
        
        ArrayList<String> vowels = new ArrayList<String>();
        vowels.add("a");
        vowels.add("e");
        vowels.add("i");
        vowels.add("o");
        vowels.add("u");
        
        ArrayList<String> consonants = new ArrayList<String>();
        consonants.add("b");
        consonants.add("c");
        consonants.add("d");
        consonants.add("f");
        consonants.add("g");
        consonants.add("h");
        consonants.add("j");
        consonants.add("k");
        consonants.add("l");
        consonants.add("m");
        consonants.add("n");
        consonants.add("p");
        consonants.add("q");
        consonants.add("r");
        consonants.add("s");
        consonants.add("t");
        consonants.add("v");
        consonants.add("w");
        consonants.add("x");
        consonants.add("z");
        
        ArrayList<String> allowed = new ArrayList<String>();
        
        allowed.add("a");
        allowed.add("b");
        allowed.add("c");
        allowed.add("d");
        allowed.add("e");
        allowed.add("f");
        allowed.add("g");
        allowed.add("h");
        allowed.add("i");
        allowed.add("j");
        allowed.add("k");
        allowed.add("l");
        allowed.add("m");
        allowed.add("n");
        allowed.add("o");
        allowed.add("p");
        allowed.add("q");
        allowed.add("r");
        allowed.add("s");
        allowed.add("t");
        allowed.add("u");
        allowed.add("v");
        allowed.add("w");
        allowed.add("x");
        allowed.add("z");
        
        Iterator it = allowed.iterator();
        ArrayList<ArrayList<String>> passwords = new ArrayList<ArrayList<String>>();
        while(it.hasNext()){
            String letter = (String)it.next();
            ArrayList<String> return_words = getMelodiousWord(letter,vowels,consonants,n);
            passwords.add(return_words);
        }
        
  //      System.out.println(passwords.size());
        Iterator itt = passwords.iterator();
        while(itt.hasNext()){
            ArrayList<String> tempo = (ArrayList<String>)itt.next();
            for(String s:tempo){
                System.out.println(s);
            }
        }
       
    }
    
    public static ArrayList<String> getMelodiousWord(String letter,ArrayList<String> v,ArrayList<String> c,int n){
        ArrayList<String> passwords = new ArrayList<String>();
        int i = 0;
        int j = 0;
        
        if( n == 1){
   //         System.out.println(letter);
            passwords.add(letter);
            return passwords;
        }
        
        ArrayList<String> temp_store = new ArrayList<String>();
        
        while(n>1){
            
            
            if(temp_store.size() == 0){
                  if(v.contains(letter)){
                
                Iterator c_it = c.iterator();
                while(c_it.hasNext()){
                    String temp = (String)c_it.next();
                    String word = letter + temp;
                    temp_store.add(word);
     //               System.out.println(word);
                }
                 n--;                
                }else if(c.contains(letter)){

                    Iterator v_it = v.iterator();
                    while(v_it.hasNext()){
                        String temp = (String)v_it.next();
                        String word = letter+temp;
            //            System.out.println(word);
                        temp_store.add(word);
                    }
                    n--;
                }
             }else{
                
                ArrayList<String> another = new ArrayList<String>();
                
                Iterator it = temp_store.iterator();
                while(it.hasNext()){
                    
                    String w = (String)it.next();
                    String last = Character.toString(w.charAt(w.length()-1));
                    
                    if(v.contains(last)){
                              Iterator c_itt = c.iterator();
                                while(c_itt.hasNext()){
                                    String temp = (String)c_itt.next();
                                    String temp_word = w + temp;
                                    another.add(temp_word);
                             //     System.out.println(word);
                                }    
                    }else if(c.contains(last)){
                           Iterator v_itt = v.iterator();
                    while(v_itt.hasNext()){
                        String temp = (String)v_itt.next();
                        String temp_word = w + temp;
                        another.add(temp_word);
                        //System.out.println(word);
                    }
                    }
              
                }
                
                temp_store = another;
                
                n--;                
            }
            
          
            
        }
        
       return temp_store;
    }
    
}
